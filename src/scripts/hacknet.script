function purchaseNodes(maxNodes) {
	print("	Purchasing the maximum amount of nodes possible...")

	while (hacknet.numNodes() < maxNodes) {
		if (hacknet.getPurchaseNodeCost() > getServerMoneyAvailable("home")) {
			break
		}
		var nodeId = hacknet.purchaseNode()
		tprint("		PURCHASED HACKNET NODE #" + nodeId)
		 
	}
	print("	... done")
}

function upgradeNodeLevel(nodeId, upgradeTo) {
	print("		Upgrading level to " + upgradeTo)
	var node = hacknet.getNodeStats(nodeId)
	while (node.level < upgradeTo) {
		if (hacknet.getLevelUpgradeCost(nodeId, 1) > getServerMoneyAvailable("home")) {
			break
		}
		
		hacknet.upgradeLevel(nodeId, 1)
		node = hacknet.getNodeStats(nodeId)

		print("			UPGRADED LEVEL TO " + node.level)
	}
	print("		... done")
}

function upgradeNodeRAM(nodeId, upgradeTo) {
	print("		Upgrading RAM to " + upgradeTo)
	var node = hacknet.getNodeStats(nodeId)
	while (node.ram < upgradeTo) {
		if (hacknet.getRamUpgradeCost(nodeId, 1) > getServerMoneyAvailable("home")) {
			break
		}
		
		hacknet.upgradeRam(nodeId, 1);
		node = hacknet.getNodeStats(nodeId)
		print("			UPGRADED RAM TO " + node.ram)
	}
	print("		... done")
}

function upgradeNodeCores(nodeId, upgradeTo) {
	print("		Upgrading Cores to " + upgradeTo)
	var node = hacknet.getNodeStats(nodeId)
	while (node.cores < upgradeTo) {
		if (hacknet.getCoreUpgradeCost(nodeId, 1) > getServerMoneyAvailable("home")) {
			break
		}
		
		hacknet.upgradeCore(nodeId, 1);
		node = hacknet.getNodeStats(nodeId)
		print("			UPGRADED CORES TO " + node.cores)
	}
	print("		... done")
}

print(" ")
print("// ---- UPGRADING HACKNET NODES")
if (args.length > 0) {
	print("	(")
	for (var i = 0; i < args.length; i++) {
		print("		" + args[i])
	}
	print("	)")
}

if (args.length < 4) {
	throw new Error("	(hacknetNodesNum, expectedNodeLevel, expectedNodeRAM, expectedNodeCores) are expected")
}

purchaseNodes(args[0])

for (var i = 0; i < hacknet.numNodes(); i++) {
	print("	** NODE #" + i)
	upgradeNodeLevel(i, args[1])
	upgradeNodeRAM(i, args[2])
	upgradeNodeCores(i, args[3])
	print(" ")
}

print("DONE ---- //")
print(" ")